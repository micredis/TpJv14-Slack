Grigory Kislin [12:11 AM]
joined #flooding.

Grigory Kislin [12:11 AM]
set the channel purpose: оффтопик

Grigory Kislin [12:11 AM]
set the channel topic: оффтопик

Katherine [7:02 AM]
joined #flooding along with 10 others.

Vitaly [4:47 PM]
знатоки wildcard, хелп
`List<? extends Number> numbers = new ArrayList<>();`
и второй вариант:
`List<? super Number> numbers = new ArrayList<>();`
добавляем элементы:
` numbers.add(1);
  numbers.add(1L);
  numbers.add(1f);` (edited)
на варианте 1 - идея ругается, на 2 - все норм, хотя по логике - Integer ext Number, Double ext Number  и т.д.,  и уж никак не Integer super Number
в чем подвох?

shtramak [4:52 PM]
Загугли PECS
Producer - extends, consumer - super
https://youtu.be/_0c9Fd9FacU
YouTubeJUG .ru
Александр Маторин — Неочевидные Дженерики



Vitaly [4:54 PM]
ага, спс, на хабре тоже нашел
действительно неочевидные


Vitaly [5:01 PM]
Знатоки Hibernate, хелп
есть реализация JPA через Hibernate и Spring
есть EntityManager

Vitaly [5:03 PM]
uploaded this image: image.png 


Vitaly [5:04 PM]
ставлю точку дебага, чтобы посмотреть что внутри EntityManager:

Vitaly [5:05 PM]
uploaded this image: image.png 


Vitaly [5:06 PM]
т.е. некая реализация FactoryBean, что и следовало ожидать, оно определено в xml
собственно вопрос - в самом классе Local...EFean - нет реализаций методов EntityManager, для примера смотрим метод persist()

Vitaly [5:10 PM]
uploaded this image: image.png 


Vitaly [5:10 PM]
как так происходит, что за магия?
и в списке классов, имплементирующих EntityManager не видно бина LocalContainerEntityManagerFactoryBean

Vitaly [5:13 PM]
uploaded this image: image.png 


Grigory Kislin [12:28 PM]
@Vitaly как у нас будет hibrnate - мы немножко это подебажим
в конце это все приходит к сессиям в реализации хибернайта (edited)

tema.emelyan [10:19 AM]
joined #flooding.


Vitaly [9:06 PM]
Всем привет, кто что знает про потокобезопасность int? Как-то спрашивали на собесе такое, потом гуглил, попадала пара статей - все скаляры меньше 4 байт записываются в одну операцию (что-то типа атомик), больше 4 - записываются в размер/4 байта прохода, и потоконебезопасны. Вопрос - насколько это реально применимо? Я так понимаю, можно byte/short/int писать без volatile? (edited)

Ma3stro [9:32 PM]
Atomic типы. Для инт AtomicInteger, все операции атомарные, загугли


Vitaly [Jun 15th at 9:33 PM]
in #flooding
обычный инт - атомик?


14 replies
vch [4 days ago]
1 и та же переменная хранится в нескольких местах - в памяти, в кэше 1 уровня (который у каждого ядра процессора свой), в кэшах 2 и 3 уровня. Процессор атомарно изменит переменную в своём кэше 1 уровня, но другие ядра об этом не узнают и будут какое-то время работать с устаревшими данными.


Vitaly [4 days ago]
я тоже так думал :slightly_smiling_face:


Vitaly [4 days ago]
думал - либо volatile, либо никак


vch [4 days ago]
может тут путаница в понятиях получилась? Атомарность присвоения означает, что если в переменной был 0, а мы присвоили 10000, то оно произойдёт сразу, а не по частям - т.е. другие потоки будут видеть либо 0, либо 10000, а не какие-нибудь иные промежуточные значения. Но - атомарность присвоения не гарантирует, что другие потоки немедленно увидят новое значение.


Vitaly [4 days ago]
не, там как раз по поводу записи, там в #flood кинул скрины


Vitaly [4 days ago]
оно отлично от обычного понятия потокбезопасности


vch [4 days ago]
Ну, это немного сомнительный аргумент - неизвестно чья статья. Найти бы точное указание в спецификации...


Vitaly [4 days ago]
по сути проблема возникает когда один поток пишет - и много потоков читает, например. Получается - он начинает писать лонг, он не влезает в 4 байта, записал первый байт, и тут же его читает второй поток - ссылка то на переменную есть у него, и хватает не то... как я понимаю


vch [4 days ago]
Ты опять про атомарность присвоения говоришь. А я про другое - про видимость для других потоков нового значения. Даже просто логически если подумать - есть множество последовательных вычислений. Если бы после каждого присвоения кэш сбрасывался в память - это было бы очень медленно.


Vitaly [4 days ago]
я тебя понимаю, и я  о том же


Vitaly [4 days ago]
https://stackoverflow.com/questions/3449790/java-atomics-operations
Stack Overflow
java atomics operations
Is correct to divide the following statements: int v = ++j; as: read j value (atomic); increment by 1 the value read (NON atomic possibly interference by other thread); write the adding result t...
 


Vitaly [4 days ago]
тоже рядом, но не совсем то


Vitaly [4 days ago]
но просто даже в разрезе атомарности присвоения - наверное должны ж быть у всего этого цели и методы работы?


vch [4 days ago]
единственное что я вижу для использования - это что будет видно либо старое значение, либо новое, но не что-то совсем новое. Есть случаи, когда это допустимо в логике приложения. (edited)


Vitaly [9:34 PM]
я не про AtomicInteger, самый обычный int

Ma3stro [9:34 PM]
Нет, обычный непотокобезопасен. Операция i++ вообще выполняется в несколького шагов, если из разных нитей дергать, то будут проблемы уж точно

Vitaly [9:35 PM]
так вот про это и вопрос
i++  - да, но операции чтения/записи в int - якобы безопасны
меня это мучает
ну вот смотрите, народ

Vitaly [9:36 PM]
uploaded this image: image.png 


Vitaly [9:43 PM]
uploaded this image: image.png 


Vitaly [9:44 PM]
оно по кускам везде гуглится, это явно происходит от JVM, но пока не нашел логического объяснения и применения
а тим лид с коварным видом спрашивал :grin:

Grigory Kislin [11:09 PM]
@Vitaly
1. https://dzone.com/articles/longdouble-are-not-atomic-in-java
2. про канкаренси нужно думать только при одновременном доступе нескольких потоком к одним объектам
про конкуренси еще можно посмотрет открытое занятие к masterjava (edited)
dzone.com
Long and Double Values Are Not Atomic in Java - DZone Java
In Java 64-bit, long and double values were treated as two 32-bit values. That means, a 64-bit write operation is basically performed as two separate 32-bit operations.
https://dz2cdn3.dzone.com/storage/article-thumb/792678-thumb.jpg

Stanislav [11:41 PM]
uploaded this image: Screenshot_20180616-024027_ReadEra.jpg 


Stanislav [11:44 PM]
uploaded this file 
JavaConcurrencyInPractice_2010.pdf
3 MB PDF


LeoJames [1:18 AM]
uploaded this image: @Макс Куркудюк 


LeoJames [1:18 AM]
uploaded this image: 2.png 


LeoJames [1:21 AM]
@Макс Куркудюк Гляди, Максимка, как надо людей нае** кхм, дезинформировать. Раз в полгода изображаем видимость работы, проплачиваем рекламу и на фриланс платформах нанимаем людей для комментов, делаем суперм-пупер-мега акцию с блекджеком и скидками, впариваем лоху годовые подписки, которые он выбросит через неделю - повторяем еще через полгода.
Специально для тебя заморочился:grin:
Это я еще так удачно попал, там есть счастливые обладатели годовых подписок с 0 уровнем. Сейчас ситуация не изменилась - разве что комменты потерли, а мой фейковый аккаунт с милейшим вопросом "какого рожна комментаторы больше не заходили на ресурс" потерли через 2 часа с 3х недельным баном (edited)

LeoJames [1:26 AM]
uploaded this image: 3.png 


Tanya [1:30 AM]
на счет проблем с оплатой и бурной радосью - это регулярно, и пластинка за 3 года не поменялась
но в 2015 я покупала на год, т.к. годовая 100 была (по сути безлимитная), а мес по 30 (edited)

LeoJames [1:32 AM]
Ну надо же изобразить дикое желание покупки и доброго дядю модера, который всегда придет на помощь

LeoJames [1:33 AM]
uploaded this image: 4.png 


LeoJames [1:34 AM]
Эти "в разработке" еще лет 5 позволят доить наивных

Макс Куркудюк [7:22 AM]
Ну так, в коментарях я також помічав людей, які не пройшли пару перших рівнів і вже дуже розхвалювали JR...
Але далі такі люди відсіялись і частіше всього писали корисну інформацію про матеріал та хороші посилання..
Тож загалом, там є достатьньо недоліків, які ніхто не хоче виправляти, але і плюси теж є.
Мені сподобався формат навчання у вигляді квесту. Це додавало азарту)
На рахунок "в розробці" недавно дійшов схожої думки. Чув, що "розробка" триває вже не один рік і, схоже, триватиме ще чимало часу)
Ну, я радий, що потрапив (майже, так як ще потрібно пройти стажування і знайти роботу) у дану область сидячи дома)
Надіюсь це швидко окупиться:slightly_smiling_face:

tema.emelyan [7:31 AM]
не ожидал, что гугл транслейт так швидко переводит украинский

tema.emelyan [7:32 AM]
uploaded this image: Screenshot_20180619_143001.png 


tema.emelyan [7:32 AM]
на английский причём ещё лучше